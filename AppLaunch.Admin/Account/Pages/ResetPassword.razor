@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using AppLaunch.Services.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center pt-16">
    <MudPaper Elevation="3" Class="pa-8 text-center" Width="100%">
        <MudText Typo="Typo.h4" GutterBottom="true">Reset Password</MudText>
        <MudText Typo="Typo.h6" GutterBottom="true">Reset your password.</MudText>
        <MudDivider Class="my-4"/>

        @* Display error messages from identityErrors, consistent with other pages *@
        @if (Message is not null)
        {
            <MudAlert Severity="Severity.Error"
                      Variant="Variant.Filled"
                      Class="mb-4"
                      Icon="@Icons.Material.Filled.Warning"
                      NoIcon="false">
                @Message
            </MudAlert>
        }

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <MudValidationSummary Class="mb-4" /> @* Using MudValidationSummary for integrated styling *@

            @* Hidden input for Code. Note: The original had name="Input.Code", but @bind-Value handles this.
               Leaving it as a direct HTML input for strict functional equivalence on post if needed,
               though @bind-Value on MudTextField usually suffices for form data. *@
            <input type="hidden" name="Input.Code" value="@Input.Code"/>

            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Email"
                                  Label="Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  For="@(() => Input.Email)"
                                  Required="true"
                                  RequiredError="Email is required."
                                  AutoComplete="username" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Password"
                                  Label="Password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  For="@(() => Input.Password)"
                                  Required="true"
                                  RequiredError="Password is required."
                                  AutoComplete="new-password" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.ConfirmPassword"
                                  Label="Confirm password"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  For="@(() => Input.ConfirmPassword)"
                                  Required="true"
                                  RequiredError="Confirm password is required."
                                  AutoComplete="new-password" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Class="mt-4">
                        Reset
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    // Computed property for displaying errors from IdentityResult
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        identityErrors = null;

        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        // Decode the code and assign it to the Input model.
        // This is sent back on form submission via a hidden input.
        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        // Clear any previous errors on form submission attempt
        identityErrors = null;

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist for security reasons.
            // Always redirect to the confirmation page.
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        // If user exists, attempt to reset password
        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        // If not successful and no redirect occurred, capture errors to display to the user
        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        // The code is required but comes from the query string initially
        [Required] public string Code { get; set; } = "";
    }
}