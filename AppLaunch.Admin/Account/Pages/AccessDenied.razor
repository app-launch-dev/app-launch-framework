@page "/Account/AccessDenied"
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Access denied</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="my-8 py-8">
    <MudPaper Elevation="3" Class="pa-6">
        <header>
            <MudText Typo="Typo.h3" Color="Color.Error" Class="mb-4">Access denied</MudText>
            <MudText Typo="Typo.body1" Color="Color.Error" Class="mb-4">You do not have access to this resource.</MudText>
            <MudDivider Class="my-4" />

            @if (userRoles.Any())
            {
                <MudText Typo="Typo.body1" Class="mb-2">Your assigned roles:</MudText>
                <MudList Items="@userRoles" T="string">
                    @foreach (var role in userRoles)
                    {
                        <MudListItem Icon="@Icons.Material.Filled.CheckCircleOutline">@role</MudListItem>
                    }
                </MudList>
            }

            else
            {
                <MudText Typo="Typo.body1">You do not have any assigned roles.</MudText>
            }
        </header>
    </MudPaper>
</MudContainer>

@code {
    private List<string> userRoles = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            userRoles = user.Claims
                .Where(c => c.Type == System.Security.Claims.ClaimTypes.Role)
                .Select(c => c.Value)
                .ToList();
        }
    }
}