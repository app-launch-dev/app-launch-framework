@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using AppLaunch.Services.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger

<PageTitle>Two-factor authentication</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center pt-16">
    <MudPaper Elevation="3" Class="pa-8 text-center">Two-factor authentication
    <MudDivider Class="my-4"/>
    
    @if (!string.IsNullOrEmpty(message))
    {
        <MudAlert Severity="Severity.Error"
                  Variant="Variant.Filled"
                  Class="mb-4"
                  Icon="@Icons.Material.Filled.Warning"
                  NoIcon="false">
            @message
        </MudAlert>
    }
    
    <MudText Typo="Typo.body1" GutterBottom="true">Your login is protected with an authenticator app. Enter your authenticator code below.</MudText>
    
    <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
        @* Hidden inputs for ReturnUrl and RememberMe *@
        <input type="hidden" name="ReturnUrl" value="@ReturnUrl"/>
        <input type="hidden" name="RememberMe" value="@RememberMe"/>
        
        <DataAnnotationsValidator/>
        @* Using MudValidationSummary for better MudBlazor integration - I don't think this is needed *@
        <MudValidationSummary Class="mb-4" />
        
        <MudGrid Spacing="2">
            <MudItem xs="12">
                <MudTextField @bind-Value="Input.TwoFactorCode"
                              Label="Authenticator code"
                              Variant="Variant.Outlined"
                              InputType="InputType.Text"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Key"
                              For="@(() => Input.TwoFactorCode)"
                              Required="true"
                              RequiredError="Authenticator code is required."
                              HelperText="Enter your 6-digit code from the authenticator app (spaces and hyphens are ignored)."
                              AutoComplete="off"/>
            </MudItem>
            <MudItem xs="12">
                <MudCheckBox @bind-Checked="Input.RememberMachine" Color="Color.Primary">Remember this machine</MudCheckBox>
            </MudItem>
            <MudItem xs="12">
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Class="mt-4">
                    Log in
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
    <MudText Typo="Typo.body2" Class="mt-4">
        Don't have access to your authenticator device? You can
        <MudLink Href="@($"Account/LoginWithRecoveryCode?ReturnUrl={ReturnUrl}")" Typo="Typo.body2">log in with a recovery code</MudLink>.
    </MudText>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        // If not, this throws an InvalidOperationException and stops rendering/execution.
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user. Please try logging in again.");
    }

    private async Task OnValidSubmitAsync()
    {
        // Clean the input code by removing spaces and hyphens
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);

        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            // Only set message if login attempt fails and no redirect occurs
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Authenticator code is required.")]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}