@page "/Account/LoginWithRecoveryCode"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using AppLaunch.Services.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

<PageTitle>Recovery code verification</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center pt-16">
    <MudPaper Elevation="3" Class="pa-8 text-center" Width="100%">
        <MudText Typo="Typo.h4" GutterBottom="true">Recovery Code Verification</MudText>
        <MudDivider Class="my-4"/>

        @* Display message using MudAlert for consistent error/status reporting *@
        @if (!string.IsNullOrEmpty(message))
        {
            <MudAlert Severity="Severity.Error"
                      Variant="Variant.Filled"
                      Class="mb-4"
                      Icon="@Icons.Material.Filled.Warning"
                      NoIcon="false">
                @message
            </MudAlert>
        }

        <MudText Typo="Typo.body1" GutterBottom="true">
            You have requested to log in with a recovery code. This login will not be remembered until you provide
            an authenticator app code at log in or disable 2FA and log in again.
        </MudText>

        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            @* Using MudValidationSummary for better MudBlazor integration and styling *@
            <MudValidationSummary Class="mb-4"/>

            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RecoveryCode"
                                  Label="Recovery Code"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Text"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.LockReset"
                                  For="@(() => Input.RecoveryCode)"
                                  Required="true"
                                  RequiredError="Recovery Code is required."
                                  AutoComplete="off" />
                </MudItem>
                <MudItem xs="12">
                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Class="mt-4">
                        Log in
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first.
        // This throws an InvalidOperationException and stops rendering/execution if the user is not found.
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user. Please try logging in again.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Services.Utils.Sanitize.RemoveSpaces(Input.RecoveryCode!); 

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            // Only set message if login attempt fails and no redirect occurs
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            message = "Error: Invalid recovery code entered.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Recovery Code is required.")]
        [DataType(DataType.Text)]
        [Display(Name = "Recovery Code")]
        public string RecoveryCode { get; set; } = "";
    }
}