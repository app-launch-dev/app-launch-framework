@rendermode @(new InteractiveServerRenderMode(prerender: false))

@page "/admin/"
@using System.Net.Http.Headers
@using System.Text
@using AppLaunch.Models.Updates
@layout AppLaunchDefault
@inject HttpClient Http
@inject ISettingsService SettingsService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IUpdateService UpdateService
<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Dashboard</MudText>
        </MudItem>
        
        @if (InstalledVersion != null)
        {
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>Installed Version</MudText>
                        <MudText Typo="Typo.body2">@InstalledVersion.Sha Released: @InstalledVersion.Date.ToString()</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        
        @if (LatestVersion != null)
        {
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>Latest Version</MudText>
                        <MudText Typo="Typo.body2">@LatestVersion.Sha Released: @LatestVersion.Date.ToString()</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        
      
        
        @if (UnavailableMessageInstalled != "")
        {
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>Installed Version</MudText>
                        <MudText Typo="Typo.body2">@UnavailableMessageInstalled</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        
        @if (UnavailableMessageLatest != "")
        {
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>Latest Version</MudText>
                        <MudText Typo="Typo.body2">@UnavailableMessageLatest</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        
 
        
        @* @if (!updateInProcess) *@
        @* { *@
        @*     <MudItem xs="12"> *@
        @*         @if (packages == null) *@
        @*         { *@
        @*             <p> *@
        @*                 <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true"/> *@
        @*                 <em>Checking for updates…</em> *@
        @*             </p> *@
        @*         } *@
        @*         else if (!packages.Any()) *@
        @*         { *@
        @*             <p>No AppLaunch packages found.</p> *@
        @*         } *@
        @*         else *@
        @*         { *@
        @*             <MudSimpleTable Style="overflow-x: auto;"> *@
        @*                 <thead> *@
        @*                 <tr> *@
        @* *@
        @*                     <th>Package</th> *@
        @*                     <th>Installed</th> *@
        @*                     <th>Latest</th> *@
        @*                     <th></th> *@
        @*                 </tr> *@
        @*                 </thead> *@
        @*                 <tbody> *@
        @*                 @foreach (var pkg in packages) *@
        @*                 { *@
        @*                     <tr> *@
        @*                         <td>@pkg.Name</td> *@
        @*                         <td>@pkg.DisplayVersion</td> *@
        @*                         <td>@pkg.Latest</td> *@
        @*                         <td> *@
        @*                             @if (pkg.UpdateAvailable) *@
        @*                             { *@
        @*                                 <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Update *@
        @*                                     Available *@
        @*                                 </MudChip> *@
        @*                             } *@
        @*                         </td> *@
        @*                     </tr> *@
        @*                 } *@
        @*                 </tbody> *@
        @*             </MudSimpleTable> *@
        @*         } *@
        @*     </MudItem> *@
        @* *@
        @*     if (showUpdateButton) *@
        @*     { *@
        @*         <MudItem xs="12"> *@
        @*             <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Update" *@
        @*                        @onclick="TriggerGitHubActionAsync" Color="Color.Primary">Update Now *@
        @*             </MudButton> *@
        @*         </MudItem> *@
        @*     } *@
        @*     else *@
        @*     { *@
        @*         <MudItem xs="6"> *@
        @*             <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.UpdateDisabled" *@
        @*                        Color="Color.Primary" Disabled="true">Update Now *@
        @*             </MudButton> *@
        @*         </MudItem> *@
        @*         <MudItem xs="6" Class="d-flex justify-end"> *@
        @*             <MudButton Variant="Variant.Text" *@
        @*                        StartIcon="@Icons.Material.Filled.Update" *@
        @*                        Color="Color.Secondary" *@
        @*                        @onclick="TriggerGitHubActionAsync" *@
        @*                        Style="text-transform:none"> *@
        @*                 Force Update / ReInstall *@
        @*             </MudButton> *@
        @*         </MudItem> *@
        @*     } *@
        @* } *@
        @* else *@
        @* { *@
        @*     <MudItem xs="12" Class="d-flex justify-center"> *@
        @*         <MudProgressCircular Color="Color.Success" Indeterminate="true"/> Update In Process. Please be patient. Your site may go offline once installation begins. *@
        @*     </MudItem> *@
        @* } *@
    </MudGrid>
</MudPaper>

@code {
    bool showUpdateButton = false;
    bool updateInProcess = false;
    private CoreUpdateModel? LatestVersion { get; set; }
    private CoreUpdateModel? InstalledVersion { get; set; }
    private string UnavailableMessageInstalled { get; set; } = "";
    private string UnavailableMessageLatest { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await CheckForUpdates();
    }


    private async Task CheckForUpdates()
    {
        await GetLatestVersion();
        await GetInstalledVersion();
    }


    private async Task GetLatestVersion()
    {
        try
        {
            var latestVersionResponse = await UpdateService.GetLatestVersion();
            if (!latestVersionResponse.IsSuccess) throw new Exception(latestVersionResponse.Message);
            LatestVersion = latestVersionResponse.Data;
        }
        catch (Exception ex)
        {
            UnavailableMessageLatest = "Unable to check for the latest available updates";
        }
    }
    
    private async Task GetInstalledVersion()
    {
        try
        {
            var installedVersionResponse = await UpdateService.GetInstalledVersion();
            if (!installedVersionResponse.IsSuccess) throw new Exception(installedVersionResponse.Message);
            InstalledVersion = installedVersionResponse.Data;
        }
        catch (Exception ex)
        {
            UnavailableMessageInstalled = "Unable to determine the installed version";
        }
    }
    
    
    
    

    // private async Task CheckForUpdates()
    // {
    //     try
    //     {
    //         await Task.Delay(1000);
    //         var mySettingsResponse = await SettingsService.GetSettings();
    //         if (!mySettingsResponse.IsSuccess) throw new Exception(mySettingsResponse.Message);
    //         mySettings = mySettingsResponse.Data;
    //
    //
    //         packages = AppDomain.CurrentDomain
    //             .GetAssemblies()
    //             .Where(a => a.GetName().Name?.StartsWith("AppLaunch.") == true)
    //             .Select(a => new PackageInfo
    //             {
    //                 Name = a.GetName().Name ?? "",
    //                 InstalledVersion = a.GetName().Version?.ToString() ?? "unknown"
    //             })
    //             .OrderBy(p => p.Name)
    //             .ToList();
    //
    //         foreach (var pkg in packages)
    //         {
    //             try
    //             {
    //                 var url = $"https://api.nuget.org/v3-flatcontainer/{pkg.Name.ToLowerInvariant()}/index.json";
    //                 var versionList = await Http.GetFromJsonAsync<NuGetVersionIndex>(url);
    //                 var latest = versionList?.Versions?.LastOrDefault();
    //
    //                 if (!string.IsNullOrWhiteSpace(latest))
    //                 {
    //                     pkg.Latest = latest;
    //
    //                     // Parse versions and compare only major.minor.patch
    //                     var localVer = new Version(pkg.InstalledVersion);
    //                     var remoteVer = new Version(latest);
    //
    //                     var simplifiedLocal = new Version(localVer.Major, localVer.Minor, localVer.Build);
    //                     var simplifiedRemote = new Version(remoteVer.Major, remoteVer.Minor, remoteVer.Build);
    //
    //                     pkg.UpdateAvailable = simplifiedLocal < simplifiedRemote;
    //
    //                     //show update button if settings configured and new version found
    //                     if (pkg.UpdateAvailable && !string.IsNullOrEmpty(mySettings.GitHubWorkflowFile))
    //                     {
    //                         showUpdateButton = true;
    //                     }
    //                 }
    //             }
    //             catch
    //             {
    //                 pkg.Latest = "unavailable";
    //             }
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add(ex.Message, Severity.Error);
    //     }
    // }
    //
    // record NuGetVersionIndex
    // {
    //     public List<string>? Versions { get; set; }
    // }
    //
    // class PackageInfo
    // {
    //     public string Name { get; set; } = "";
    //     public string InstalledVersion { get; set; } = "";
    //     public string? Latest { get; set; } = null;
    //     public bool UpdateAvailable { get; set; } = false;
    //
    //     public string DisplayVersion =>
    //         System.Version.TryParse(InstalledVersion, out var v)
    //             ? $"{v.Major}.{v.Minor}.{v.Build}"
    //             : InstalledVersion;
    // }
    //
    // public async Task TriggerGitHubActionAsync()
    // {
    //     try
    //     {
    //         bool? runUpdates = await DialogService.ShowMessageBox(
    //             "Start Updates",
    //             "Once initialized, your site will go offline until the updates have completed. Proceed?",
    //             yesText: "Update Now!", cancelText: "Cancel");
    //         if (runUpdates != true) throw new Exception("Update Cancelled");
    //
    //
    //         var client = new HttpClient();
    //         client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("AppLaunch", "1.0"));
    //         client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("token", $"{mySettings.GitHubToken}");
    //
    //         var response = await client.PostAsync(
    //             $"https://api.github.com/repos/{mySettings.GitHubOwner}/{mySettings.GitHubRepo}/actions/workflows/{mySettings.GitHubWorkflowFile}/dispatches",
    //             new StringContent("{\"ref\":\"main\"}", Encoding.UTF8, "application/json"));
    //
    //         if (response.IsSuccessStatusCode)
    //         {
    //             // Success feedback
    //             Snackbar.Add($"Updates have been requested. Your site will temporarily go offline while updates are in process.", Severity.Success);
    //         }
    //         else
    //         {
    //             Snackbar.Add($"Unable to initiate updates: {response.ReasonPhrase}", Severity.Error);
    //         }
    //
    //         showUpdateButton = false;
    //         updateInProcess = true;
    //     }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add(ex.Message, Severity.Error);
    //     }
    // }

}