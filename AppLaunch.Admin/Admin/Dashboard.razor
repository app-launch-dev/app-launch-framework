@page "/admin/"
@layout AppLaunchDefault
@inject HttpClient Http

<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Dashboard</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Rapidly develop and deliver line of business applications
            </MudText>
        </MudItem>
        
        <MudItem xs="12">
            @if (packages == null)
            {
                <p><em>Loading…</em></p>
            }
            else if (!packages.Any())
            {
                <p>No AppLaunch packages found.</p>
            }
            else
            {
                <MudSimpleTable Style="overflow-x: auto;">
                    <thead>
                    <tr>

                        <th>Package</th>
                        <th>Installed</th>
                        <th>Latest</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var pkg in packages)
                    {
                        <tr>
                            <td>@pkg.Name</td>
                            <td>@pkg.DisplayVersion</td>
                            <td>@pkg.Latest</td>
                            <td>
                                @if (pkg.UpdateAvailable)
                                {
                                    <MudChip T="string" Color="Color.Success" Variant="Variant.Filled">Update Available</MudChip>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </MudSimpleTable>
            }
        </MudItem>
       
        
    </MudGrid>
</MudPaper>

@code {
    private List<PackageInfo>? packages;

    protected override async Task OnInitializedAsync()
    {
        packages = AppDomain.CurrentDomain
            .GetAssemblies()
            .Where(a => a.GetName().Name?.StartsWith("AppLaunch.") == true)
            .Select(a => new PackageInfo
            {
                Name = a.GetName().Name ?? "",
                InstalledVersion = a.GetName().Version?.ToString() ?? "unknown"
            })

            .OrderBy(p => p.Name)
            .ToList();

        foreach (var pkg in packages)
        {
            try
            {
                var url = $"https://api.nuget.org/v3-flatcontainer/{pkg.Name.ToLowerInvariant()}/index.json";
                var versionList = await Http.GetFromJsonAsync<NuGetVersionIndex>(url);
                var latest = versionList?.Versions?.LastOrDefault();

                if (!string.IsNullOrWhiteSpace(latest))
                {
                    pkg.Latest = latest;

                    // Parse versions and compare only major.minor.patch
                    var localVer = new Version(pkg.InstalledVersion);
                    var remoteVer = new Version(latest);

                    var simplifiedLocal = new Version(localVer.Major, localVer.Minor, localVer.Build);
                    var simplifiedRemote = new Version(remoteVer.Major, remoteVer.Minor, remoteVer.Build);

                    pkg.UpdateAvailable = simplifiedLocal < simplifiedRemote;
                }
            }
            catch
            {
                pkg.Latest = "unavailable";
            }
        }

    }

    record NuGetVersionIndex
    {
        public List<string>? Versions { get; set; }
    }

    class PackageInfo
    {
        public string Name { get; set; } = "";
        public string InstalledVersion { get; set; } = "";
        public string? Latest { get; set; } = null;
        public bool UpdateAvailable { get; set; } = false;

        public string DisplayVersion =>
            System.Version.TryParse(InstalledVersion, out var v)
                ? $"{v.Major}.{v.Minor}.{v.Build}"
                : InstalledVersion;
    }
}