@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using AppLaunch.Models.Settings
@using Microsoft.AspNetCore.Identity.UI.Services
@page "/admin/settings/"
@inject ISettingsService SettingsService
@inject ISnackbar Snackbar
@inject IEmailSender EmailSender
@inject NavigationManager NavigationManager

<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Settings</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Configure global settings for your organization
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

@if (SettingsData != null)
{
<EditForm Model="@SettingsData" OnValidSubmit="SaveSettings">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">General Settings</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Site Name"
                              @bind-Value="SettingsData.SiteName" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Content Key" Class="mt-3"
                              @bind-Value="SettingsData.ContentKey" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Dashboard Colors</MudText>
        <MudGrid>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Primary (Light)" @bind-Text="SettingsData.ColorPrimaryLight" Style="@($"color: {SettingsData.ColorPrimaryLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX"  Label="Primary (Dark)" @bind-Text="SettingsData.ColorPrimaryDark" Style="@($"color: {SettingsData.ColorPrimaryDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Secondary (Light)" @bind-Text="SettingsData.ColorSecondaryLight" Style="@($"color: {SettingsData.ColorTextSecondaryLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Secondary (Dark)" @bind-Text="SettingsData.ColorSecondaryDark" Style="@($"color: {SettingsData.ColorTextSecondaryDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="App Bar Background (Light)" @bind-Text="SettingsData.ColorAppbarBackgroundLight" Style="@($"color: {SettingsData.ColorAppbarBackgroundLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="App Bar Background (Dark)" @bind-Text="SettingsData.ColorAppbarBackgroundDark" Style="@($"color: {SettingsData.ColorAppbarBackgroundDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="App Bar Text (Light)" @bind-Text="SettingsData.ColorAppbarTextLight" Style="@($"color: {SettingsData.ColorAppbarTextLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="App Bar Text (Dark)" @bind-Text="SettingsData.ColorAppbarTextDark" Style="@($"color: {SettingsData.ColorAppbarTextDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Background (Light)" @bind-Text="SettingsData.ColorBackgroundLight" Style="@($"color: {SettingsData.ColorBackgroundLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Background (Dark)" @bind-Text="SettingsData.ColorBackgroundDark" Style="@($"color: {SettingsData.ColorBackgroundDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Text Primary (Light)" @bind-Text="SettingsData.ColorTextPrimaryLight" Style="@($"color: {SettingsData.ColorTextPrimaryLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Text Primary (Dark)" @bind-Text="SettingsData.ColorTextPrimaryDark" Style="@($"color: {SettingsData.ColorTextPrimaryDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Text Secondary (Light)" @bind-Text="SettingsData.ColorTextSecondaryLight" Style="@($"color: {SettingsData.ColorTextSecondaryLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Text Secondary (Dark)" @bind-Text="SettingsData.ColorTextSecondaryDark" Style="@($"color: {SettingsData.ColorTextSecondaryDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Drawer Background(Light)" @bind-Text="SettingsData.ColorDrawerBackgroundLight" Style="@($"color: {SettingsData.ColorDrawerBackgroundLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Drawer Background (Dark)" @bind-Text="SettingsData.ColorDrawerBackgroundDark" Style="@($"color: {SettingsData.ColorDrawerBackgroundDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Drawer Text(Light)" @bind-Text="SettingsData.ColorDrawerTextLight" Style="@($"color: {SettingsData.ColorDrawerTextLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Drawer Text (Dark)" @bind-Text="SettingsData.ColorDrawerTextDark" Style="@($"color: {SettingsData.ColorDrawerTextDark};")" Placeholder="Select Color" />
            </MudItem>
            
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Surface (Light)" @bind-Text="SettingsData.ColorSurfaceLight" Style="@($"color: {SettingsData.ColorSurfaceLight};")" Placeholder="Select Color" />
            </MudItem>
            <MudItem xs="6">
                <MudColorPicker ColorPickerMode="ColorPickerMode.HEX" Label="Surface (Dark)" @bind-Text="SettingsData.ColorSurfaceDark" Style="@($"color: {SettingsData.ColorSurfaceDark};")" Placeholder="Select Color" />
            </MudItem>
            
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Email Settings</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Email From"
                              @bind-Value="SettingsData.DefaultEmailFrom" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="AWS SES Access Key"
                              @bind-Value="SettingsData.AwsSesAccessKey" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="AWS SWS Secret Key"
                              @bind-Value="SettingsData.AwsSesSecretKey" Variant="Variant.Outlined"/>
            </MudItem>
            
            <MudItem xs="8">
                <MudTextField Label="Test Email"
                              @bind-Value="testEmail" Variant="Variant.Outlined" Placeholder="johndoe@email.com" />
            </MudItem>
            <MudItem xs="4" Class="mt-4">
                <MudButton ButtonType="ButtonType.Button" @onclick="SendTestEmail" StartIcon="@Icons.Material.Filled.Email" Variant="Variant.Filled"
                           Color="Color.Secondary">Send Test Email
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Automatic Updates (Github)</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Personal Access Token "
                              @bind-Value="SettingsData.GitHubToken" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Owner"
                              @bind-Value="SettingsData.GitHubOwner" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Repo"
                              @bind-Value="SettingsData.GitHubRepo" Variant="Variant.Outlined"/>
            </MudItem>
            
            <MudItem xs="6">
                <MudTextField Label="Workflow File"
                              @bind-Value="SettingsData.GitHubWorkflowFile" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudPaper Class="pa-2 mt-4 mb-12">
        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled"
                   Color="Color.Primary">Update Settings
        </MudButton>
       
    </MudPaper>
    
</EditForm>    
}

@code {
    SettingsModel? SettingsData { get; set; } 
    string testEmail = "";
    
    protected override async Task OnInitializedAsync()
    {
        await GetSettings();
    }

    private async Task GetSettings()
    {
        try
        {
        var response = await SettingsService.GetSettings();
        if (!response.IsSuccess) throw new Exception("Unable to access settings");
        SettingsData = response.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private void OnFileUpload(IBrowserFile file)
    {
        // Handle the uploaded file (e.g., save it or process it)
        Console.WriteLine($"Uploaded file: {file.Name}, Size: {file.Size} bytes");
    }


    private async Task SaveSettings()
    {
        try
        {
            if (string.IsNullOrEmpty(SettingsData.ContentKey)) throw new Exception("Content Key cannot be empty");

            var saveResult = await SettingsService.SaveSettings(SettingsData);
            if (!saveResult.IsSuccess) throw new Exception(saveResult.Message);

            await GetSettings();
            Snackbar.Add("Settings Saved", Severity.Success);
        }
        catch (Exception ex ) when (ex is not NavigationException)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task SendTestEmail()
    {
        try
        {
            if (string.IsNullOrEmpty(testEmail)) throw new Exception("You must provide an e-mail address to send to.");
            if (string.IsNullOrEmpty(SettingsData.AwsSesAccessKey)) throw new Exception("You must provide the AWS SES Access Key.");
            if (string.IsNullOrEmpty(SettingsData.AwsSesSecretKey)) throw new Exception("You must provide the AWS SES Secret Key.");
            await SaveSettings();
            await EmailSender.SendEmailAsync(testEmail,"Test Message from AppLaunch", "Welcome to AppLaunch.<br /><br />This is a test message sent from the settings screen.");
            Snackbar.Add("Email Sent", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

}