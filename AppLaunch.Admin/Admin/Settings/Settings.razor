@using AppLaunch.Models.Settings
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@page "/admin/settings/"
@inject ISettingsService SettingsService
@inject ISnackbar Snackbar
@inject IEmailSender EmailSender

<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Settings</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Configure global settings for your organization
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

<EditForm Model="@SettingsData" OnValidSubmit="SaveSettings">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">General Settings</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Site Name"
                              @bind-Value="SettingsData.SiteName" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Content Key" Class="mt-3"
                              @bind-Value="SettingsData.ContentKey" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Email Settings</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Email From"
                              @bind-Value="SettingsData.DefaultEmailFrom" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="AWS SES Access Key"
                              @bind-Value="SettingsData.AwsSesAccessKey" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="AWS SWS Secret Key"
                              @bind-Value="SettingsData.AwsSesSecretKey" Variant="Variant.Outlined"/>
            </MudItem>
            
            <MudItem xs="8">
                <MudTextField Label="Test Email"
                              @bind-Value="testEmail" Variant="Variant.Outlined" Placeholder="johndoe@email.com" />
            </MudItem>
            <MudItem xs="4" Class="mt-4">
                <MudButton ButtonType="ButtonType.Button" @onclick="SendTestEmail" StartIcon="@Icons.Material.Filled.Email" Variant="Variant.Filled"
                           Color="Color.Secondary">Send Test Email
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>
    
    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Automatic Updates (Github)</MudText>

        <MudGrid>
            <MudItem xs="12">
                <MudTextField Label="Personal Access Token "
                              @bind-Value="SettingsData.GitHubToken" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Owner"
                              @bind-Value="SettingsData.GitHubOwner" Variant="Variant.Outlined"/>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Repo"
                              @bind-Value="SettingsData.GitHubRepo" Variant="Variant.Outlined"/>
            </MudItem>
            
            <MudItem xs="6">
                <MudTextField Label="Workflow File"
                              @bind-Value="SettingsData.GitHubWorkflowFile" Variant="Variant.Outlined"/>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-2 mt-4">
        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Update" Variant="Variant.Filled"
                   Color="Color.Primary">Update Settings
        </MudButton>
       
    </MudPaper>
</EditForm>
@code {
    SettingsModel SettingsData { get; set; } = new();
    string testEmail = "";
    
    protected override async Task OnInitializedAsync()
    {
        await GetSettings();
    }

    private async Task GetSettings()
    {
        var response = await SettingsService.GetSettings();
        if (response.IsSuccess) SettingsData = response.Data;
    }
    
    private void OnFileUpload(IBrowserFile file)
    {
        // Handle the uploaded file (e.g., save it or process it)
        Console.WriteLine($"Uploaded file: {file.Name}, Size: {file.Size} bytes");
    }


    private async Task SaveSettings()
    {
        try
        {
            if (string.IsNullOrEmpty(SettingsData.ContentKey)) throw new Exception("Content Key cannot be empty");

            var saveResult = await SettingsService.SaveSettings(SettingsData);
            if (!saveResult.IsSuccess) throw new Exception(saveResult.Message);

            await GetSettings();

            Snackbar.Add("Settings Saved", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    private async Task SendTestEmail()
    {
        try
        {
            if (string.IsNullOrEmpty(testEmail)) throw new Exception("You must provide an e-mail address to send to.");
            if (string.IsNullOrEmpty(SettingsData.AwsSesAccessKey)) throw new Exception("You must provide the AWS SES Access Key.");
            if (string.IsNullOrEmpty(SettingsData.AwsSesSecretKey)) throw new Exception("You must provide the AWS SES Secret Key.");
            await SaveSettings();
            await EmailSender.SendEmailAsync(testEmail,"Test Message from AppLaunch", "Welcome to AppLaunch.<br /><br />This is a test message sent from the settings screen.");
            Snackbar.Add("Email Sent", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

}