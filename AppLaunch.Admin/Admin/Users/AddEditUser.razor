@using AppLaunch.Models.Settings
@page "/admin/users/addedituser"
@page "/admin/users/addedituser/{UserId:guid}"
@inject IAlertService AlertService
@inject IUserService UserService
@inject IRoleService RoleService

<MudText Typo="Typo.h1" GutterBottom="true">Add / Edit User</MudText>

<EditForm Model="@SettingsData" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">General Settings</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Site Name" 
                                      @bind-Value="SettingsData.SiteName" Variant="Variant.Outlined" />
                        <MudTextField Label="Content Key" Class="mt-3"
                                      @bind-Value="SettingsData.ContentKey" Variant="Variant.Outlined" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4 mt-4">
        <MudText Typo="Typo.h6">Email Settings</MudText>
      
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Email From" 
                                      @bind-Value="SettingsData.DefaultEmailFrom" Variant="Variant.Outlined" />
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>


</EditForm>
@code {
    [Parameter]
    public Guid? UserId { get; set; }
    SettingsModel SettingsData { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
    //        await GetAllusers();
    }


    private async Task SaveUser()
    {
        try
        {
           
        }
        catch (Exception ex)
        {
            await AlertService.AddAlert(ex.Message, IAlertService.AlertType.Error);
        }
    }

}