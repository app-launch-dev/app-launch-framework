@using AppLaunch.Services.Data
@page "/admin/users/addedituser"
@page "/admin/users/addedituser/{UserId:guid}"
@inject IAlertService AlertService
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudText Typo="Typo.h1" GutterBottom="true">Add / Edit User</MudText>
<EditForm Model="@MyUser" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">User Details</MudText>
        <MudGrid>
            <MudItem xs="12">
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="Email" 
                                      @bind-Value="MyUser.Email" Variant="Variant.Outlined" />
                        <MudTextField Label="Phone" Class="mt-3"
                                      @bind-Value="MyUser.PhoneNumber" Variant="Variant.Outlined" />
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add User</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        </MudGrid>
    </MudPaper>

  

</EditForm>
@code {
    [Parameter]
    public Guid? UserId { get; set; }
    ApplicationUser MyUser { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        if (UserId != null)
        {
            await GetUser();
        }
    }

    private async Task GetUser()
    {
        try
        {
            MyUser = await UserService.GetUserByIdAsync(UserId.ToString());
        }
        catch (Exception ex)
        {
            await AlertService.AddAlert(ex.Message, IAlertService.AlertType.Error);
        }
    }

    private async Task SaveUser()
    {
        try
        {
            var newPassword = UserService.GeneratePassword();
            var isSuccess = await UserService.AddUserAsync(MyUser.Email, newPassword);
            if (!isSuccess) throw new Exception("Unable to add user");

            var newUser = await UserService.GetUserByEmailAsync(MyUser.Email);
            if (!isSuccess) throw new Exception($"Unable to access user {MyUser.Email}");
            
            
            Snackbar.Add("User has been added", Severity.Success);
            NavigationManager.NavigateTo($"/Admin/Users/AddEditUser/{newUser.Id}");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error adding User", Severity.Error);
        }
    }

}