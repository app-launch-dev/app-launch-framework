@using AppLaunch.Services.Data
@page "/admin/users/addedituser"
@page "/admin/users/addedituser/{UserId:guid}"
@inject IUserService UserService
@inject IRoleService RoleService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Users</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Manage user accounts in your organization
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

<EditForm Model="@MyUser" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator/>
    @* <ValidationSummary/> *@
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h6">User Details</MudText>
        <MudGrid>

            <MudItem xs="5">
                <MudTextField Label="First Name" @bind-Value="MyUser.FirstName"
                              Variant="Variant.Outlined" For="@(() => MyUser.FirstName)"/>
            </MudItem>
            <MudItem xs="2">
                <MudTextField Label="Middle" @bind-Value="MyUser.MiddleName"
                              Variant="Variant.Outlined" For="@(() => MyUser.MiddleName)"/>
            </MudItem>
            <MudItem xs="5">
                <MudTextField Label="Last Name" @bind-Value="MyUser.LastName"
                              Variant="Variant.Outlined" For="@(() => MyUser.LastName)"/>
            </MudItem>

            <MudItem xs="6">
                <MudTextField Label="Email" @bind-Value="MyUser.Email" 
                              Variant="Variant.Outlined" For="@(() => MyUser.Email)"/>
            </MudItem>

            <MudItem xs="6">
                <MudTextField Mask="@(new PatternMask("(000) 000-0000"))" Label="Phone" @bind-Value="MyUser.PhoneNumber"
                              Variant="Variant.Outlined" For="@(() => MyUser.PhoneNumber)"/>
            </MudItem>
            
        </MudGrid>
    </MudPaper>


    <MudPaper Class="pa-2 mt-4">
        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Save" Variant="Variant.Filled"
                   Color="Color.Primary">Save
        </MudButton>
        <MudButton @onclick="Close" ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Close"
                   Variant="Variant.Filled" Color="Color.Secondary">Close
        </MudButton>
    </MudPaper>


</EditForm>

@code {
    [Parameter] public Guid? UserId { get; set; }
    ApplicationUser MyUser { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserId != null)
        {
            await GetUser();
        }
    }

    private async Task GetUser()
    {
        try
        {
            var myUserResponse = await UserService.GetUserByIdAsync(UserId.ToString());
            if(!myUserResponse.IsSuccess) throw new Exception(myUserResponse.Message);
            MyUser = myUserResponse.Data;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{ex.Message}", Severity.Error);
        }
    }

    private async Task SaveUser()
    {
        CoreResponse myResponse = new();
        try
        {
            // bool isSuccess = false;
            
            if (UserId == null)
            {
                //new user
                var newPassword = UserService.GeneratePassword();
                MyUser.EmailConfirmed = true;
                myResponse = await UserService.AddUserAsync(MyUser, newPassword);
                if (!myResponse.IsSuccess) throw new Exception(myResponse.Message);
                var newUser = await UserService.GetUserByEmailAsync(MyUser.Email);
                if (!myResponse.IsSuccess) throw new Exception($"Unable to access user {MyUser.Email}");
            
                Snackbar.Add("User has been added", Severity.Success);
                NavigationManager.NavigateTo($"/Admin/Users/AddEditUser/{newUser.Data.Id}");
            }
            else
            {
                //existing user
                var existingUserResponse = await UserService.GetUserByIdAsync(UserId.ToString());
                if (!existingUserResponse.IsSuccess) throw new Exception("Unable to access user");
                var existingUser = existingUserResponse.Data;
                existingUser.FirstName = MyUser.FirstName;
                existingUser.LastName = MyUser.LastName;
                existingUser.MiddleName = MyUser.MiddleName;
                myResponse = await UserService.UpdateUserAsync(existingUser);
                if (!myResponse.IsSuccess) throw new Exception(myResponse.Message);
                Snackbar.Add("User has been updated", Severity.Success);
                NavigationManager.NavigateTo($"/Admin/Users/AddEditUser/{existingUser.Id}", true);
            }
          
        }
        catch (Exception ex ) when (ex is not NavigationException)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task Close()
    {
        NavigationManager.NavigateTo("/admin/users/", true);
    }

}