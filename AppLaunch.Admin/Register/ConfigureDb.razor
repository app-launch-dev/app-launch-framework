@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [AllowAnonymous]
@layout AppLaunchConfig
@page "/register/configuredb"
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.Extensions.Configuration
@using Microsoft.Extensions.Hosting
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IRegistrationService RegistrationService
@inject ISnackbar Snackbar
@inject TemporaryConnectionStringProvider TemporaryConnectionStringProvider
<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Welcome</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Let's get your database connection set up.
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>


@if (isDatabaseConfigured != null)
{
    if (!isDatabaseConfigured)
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="Connection String" Variant="Variant.Outlined" HelperText="Paste your MSSQL connection string"
                                          @bind-Value="model.ConnectionString" For="@(() => model.ConnectionString)"/>

                        </MudCardContent>
                        <MudCardActions>

                            @if (success)
                            {
                                <MudButton ButtonType="ButtonType.Button" OnClick="UpdateConnectionString"
                                           Variant="Variant.Filled" Color="Color.Primary"
                                           Class="ml-auto">Apply and Restart
                                </MudButton>
                            }
                            else
                            {
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"
                                           Class="ml-auto">Test Connection
                                </MudButton>
                            }

                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Database Connection Results</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary/>
                                @if (!string.IsNullOrEmpty(message))
                                {
                                    <p>@message</p>
                                }
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </EditForm>

    }

    if (isDatabaseConfigured)
    {
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudCard>
                    <MudCardContent>
                        <p>Your database has already been configured.</p>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>
    }
    
    
}



@code {
    string message = "";
    bool isDatabaseConfigured;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isDatabaseConfigured = await RegistrationService.IsDatabaseConfigured();
            if (!isDatabaseConfigured) await RegistrationService.CreateAppLaunchJsonFile();
            await LoadSettings();
        }
        catch (Exception ex) when (ex is not NavigationException)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadSettings()
    {
        try
        {
            var connectionString = Configuration.GetConnectionString("DefaultConnection");
            var connResult = await RegistrationService.TestDatabaseConnection(connectionString);
            if (connResult.HasError)
            {
                message = connResult.ErrorMessage;
            }
            else
            {
                success = true;
                //NavigationManager.NavigateTo("/", true);
            }

            StateHasChanged();
        }
        catch (Exception ex) when (ex is not NavigationException)
        {
            Console.WriteLine(ex.Message);
        }
    }


    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required] public string ConnectionString { get; set; }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        message = "";
        var connResult = await RegistrationService.TestDatabaseConnection(model.ConnectionString);
        if (connResult.HasError)
        {
            message = connResult.ErrorMessage;
        }
        else
        {
            success = true;
        }

        StateHasChanged();
    }


    public async Task UpdateConnectionString()
    {
        
        
      
            message = "";
            try
            {
                string AppSettingsPath = "applaunch.json";
                string json = System.IO.File.ReadAllText(AppSettingsPath);
                var config = JsonSerializer.Deserialize<JsonDocument>(json);

                using var stream = new FileStream(AppSettingsPath, FileMode.Create);
                using var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Indented = true });

                writer.WriteStartObject();
                foreach (var property in config.RootElement.EnumerateObject())
                {
                    if (property.Name == "ConnectionStrings")
                    {
                        writer.WritePropertyName("ConnectionStrings");
                        writer.WriteStartObject();
                        writer.WriteString("DefaultConnection", model.ConnectionString);
                        writer.WriteEndObject();
                    }
                    else
                    {
                        property.WriteTo(writer);
                    }
                }
                writer.WriteEndObject();
                TemporaryConnectionStringProvider.ConnectionString = model.ConnectionString;
                NavigationManager.NavigateTo("/", true);
            }
            catch (Exception ex) when (ex is not NavigationException)
            {
                Snackbar.Add($"Failed to update connection string: {ex.Message}", Severity.Error);
            }
        }

    }


