@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/register/createaccount/"
@using Microsoft.AspNetCore.Identity;
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using AppLaunch.Services.Data
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager



<PageTitle>Register</PageTitle>

<EditForm Model="@model" OnValidSubmit="AddAdminUser">
    <DataAnnotationsValidator/>
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Email" Class="mt-3"
                                  @bind-Value="model.Email" For="@(() => model.Email)"/>
                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                    <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                  @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password"/>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    
    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 10 characters long and must contain a symbol (!, @, #, etc.)", MinimumLength = 10)]
        [MustContainSymbol] 
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }
    
    
    public async Task AddAdminUser()
    {

        try
        {
            string roleName = "Admin";

            // Ensure the role exists
            if (!await RoleManager.RoleExistsAsync(roleName))
            {
                await RoleManager.CreateAsync(new IdentityRole(roleName));
            }

            // Check if user already exists
            var user = await UserManager.FindByEmailAsync(model.Email);
            if (user == null)
            {
                user = new ApplicationUser() { UserName = model.Email, Email = model.Email, EmailConfirmed = true };
            
                var result = await UserManager.CreateAsync(user, model.Password);
            
                if (result.Succeeded)
                {
                    await UserManager.AddToRoleAsync(user, roleName);
                    Console.WriteLine("Admin user created successfully.");
                }
                else
                {
                    Console.WriteLine("Failed to create admin user: " + string.Join(", ", result.Errors));
                }
            }
            else
            {
                Console.WriteLine("User already exists.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
       
    }
    
    public class MustContainSymbolAttribute : ValidationAttribute
    {
        private static readonly string _symbols = @"[!@#$%^&*(),.?""':{}|<>]"; // Add more if needed

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is string password)
            {
                if (!Regex.IsMatch(password, _symbols))
                {
                    return new ValidationResult("Password must contain at least one special character (!, @, #, etc.).");
                }
            }

            return ValidationResult.Success!;
        }
    }
    
}