@layout AppLaunchConfig
@page "/register/createaccount/"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using AppLaunch.Services.Data
@using System.Text.RegularExpressions
@using Microsoft.Extensions.Configuration
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContext
@inject IRegistrationService RegistrationService
@inject ISnackbar Snackbar

<PageTitle>Register</PageTitle>

<MudPaper Elevation="2" Class="pa-4 mt-2 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h4" Color="Color.Primary">Welcome</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Now, let's create an administrator account to manage this installation.
            </MudText>
        </MudItem>
    </MudGrid>
</MudPaper>


<MudPaper Class="pa-4">
    <MudText Typo="Typo.h6">Administrator Account</MudText>
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardContent>
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" method="post" OnValidSubmit="AddAdminUser" FormName="register">
                        <DataAnnotationsValidator />

                        <MudGrid>
                            <MudItem md="6">
                                <MudStaticTextField For="@(() => Input.FirstName)" @bind-Value="Input.FirstName" Variant="Variant.Outlined"
                                                    Label="First Name"
                                                    UserAttributes="@(new() { { "autocomplete", "firstname" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="6">
                                <MudStaticTextField For="@(() => Input.LastName)" @bind-Value="Input.LastName" Variant="Variant.Outlined"
                                                    Label="Last Name"
                                                    UserAttributes="@(new() { { "autocomplete", "lastname" }, { "aria-required", "true" } } )" />
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email" Variant="Variant.Outlined"
                                                    Label="Email" Placeholder="name@example.com"
                                                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" Variant="Variant.Outlined"
                                                    Label="Password" InputType="InputType.Password" Placeholder="password"
                                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                            </MudItem>
                            <MudItem md="6">
                                <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword" Variant="Variant.Outlined"
                                                    Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password"
                                                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } })"/>
                            </MudItem>
                            <MudItem md="12">
                                <MudStaticButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.SupervisorAccount" Color="Color.Primary" FormAction="FormAction.Submit">Create Account</MudStaticButton>
                            </MudItem>
                        </MudGrid>
                    </EditForm>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudPaper>





@code {
    private IEnumerable<IdentityError>? identityErrors;
    
    [SupplyParameterFromForm]
    private RegisterAccountForm Input { get; set; } = new();
    
    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override async Task OnInitializedAsync()
    {
        await Init();
    }

    private async Task Init()
    {
        try
        {
            //confirm database created
            var isDbCreated = await RegistrationService.IsDatabaseConfigured();
            if (!isDbCreated) throw new Exception("");
        
            //check for account creation completion
            var isRegistrationComplete = await RegistrationService.IRegistrationComplete();
            if (isRegistrationComplete) NavigationManager.NavigateTo("/admin/",true);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
    
    
    public async Task AddAdminUser()
    {
        try
        {
            string roleName = "Admin";

            // Check if user already exists
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                user = new ApplicationUser() { UserName = Input.Email, Email = Input.Email, EmailConfirmed = true, FirstName = Input.FirstName, LastName = Input.LastName};
            
                var result = await UserManager.CreateAsync(user, Input.Password);
            
                if (result.Succeeded)
                {
                    await UserManager.AddToRoleAsync(user, roleName);
                    Snackbar.Add("Admin User Created", Severity.Success);
                    await SignInUser();
                }
                else
                {
                    Snackbar.Add("Failed to create admin user: " + string.Join(", ", result.Errors), Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("User already exists.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
       
    }

    private sealed class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";
        
        [Required]
        public string FirstName { get; set; } = "";
        
        [Required]
        public string LastName { get; set; } = "";
        

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 10)]
        [DataType(DataType.Password)]
        [MustContainSymbol]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

    }
    
    

    private async Task SignInUser()
    {
        try
        {
            
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                await SignInManager.SignInAsync(user, isPersistent: false);
                //redirect to dashboard
                //RedirectManager.RedirectTo("/admin/dashboard/");
                //NavigationManager.NavigateTo("/admin/dashboard/",true);
                HttpContext.HttpContext.Response.Redirect("/admin/dashboard/");
            }
            
        }
        catch (Exception ex ) 
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
       

    }
    
    public class MustContainSymbolAttribute : ValidationAttribute
    {
        private static readonly string _symbols = @"[!@#$%^&*(),.?""':{}|<>]";

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            if (value is string password)
            {
                if (!Regex.IsMatch(password, _symbols))
                {
                    return new ValidationResult(
                        "Password must contain at least one special character (!, @, #, etc.).", 
                        new[] { validationContext.MemberName } // Critical fix
                    );
                }
            }
            return ValidationResult.Success!;
        }
    }

    
}
