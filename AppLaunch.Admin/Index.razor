@inject IRegistrationService RegistrationService
@inject NavigationManager NavigationManager
@inject IDbContextFactory<ApplicationDbContext> ContextFactory
@inject IConfiguration Configuration
@using Microsoft.EntityFrameworkCore
@using AppLaunch.Services.Data
@using Microsoft.Extensions.Configuration
@page "/"
@page "/{PageSegment1:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}/{PageSegment8:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}/{PageSegment8:regex(^[^_].*)}/{PageSegment9:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}/{PageSegment8:regex(^[^_].*)}/{PageSegment9:regex(^[^_].*)}/{PageSegment10:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}/{PageSegment8:regex(^[^_].*)}/{PageSegment9:regex(^[^_].*)}/{PageSegment10:regex(^[^_].*)}/{PageSegment11:regex(^[^_].*)}"
@page "/{PageSegment1:regex(^[^_].*)}/{PageSegment2:regex(^[^_].*)}/{PageSegment3:regex(^[^_].*)}/{PageSegment4:regex(^[^_].*)}/{PageSegment5:regex(^[^_].*)}/{PageSegment6:regex(^[^_].*)}/{PageSegment7:regex(^[^_].*)}/{PageSegment8:regex(^[^_].*)}/{PageSegment9:regex(^[^_].*)}/{PageSegment10:regex(^[^_].*)}/{PageSegment11:regex(^[^_].*)}/{PageSegment12:regex(^[^_].*)}"


@code {
    [Parameter] public string? PageSegment1 { get; set; }
    [Parameter] public string? PageSegment2 { get; set; }
    [Parameter] public string? PageSegment3 { get; set; }
    [Parameter] public string? PageSegment4 { get; set; }
    [Parameter] public string? PageSegment5 { get; set; }
    [Parameter] public string? PageSegment6 { get; set; }
    [Parameter] public string? PageSegment7 { get; set; }
    [Parameter] public string? PageSegment8 { get; set; }
    [Parameter] public string? PageSegment9 { get; set; }
    [Parameter] public string? PageSegment10 { get; set; }
    [Parameter] public string? PageSegment11 { get; set; }
    [Parameter] public string? PageSegment12 { get; set; }
  protected override async Task OnInitializedAsync()
  {
      await InitializeRoutes();
  }

  private async Task InitializeRoutes()
  {
      try
      {
          // check for database configuration
          var isDbConfigured = await RegistrationService.IsDatabaseConfigured();

          if (isDbConfigured)
          {
              await RunMigrations();
          }
          else
          {
              NavigationManager.NavigateTo("/register/configuredb",true);
          }
        
    
          //check for account creation completion
          var isRegistrationComplete = await RegistrationService.IRegistrationComplete();
          if (!isRegistrationComplete) NavigationManager.NavigateTo("/register/createaccount/",true);

          //check for cms plugin
          var isCmsPluginInstalled = await RegistrationService.IsCMSPluginInstalled();
          if (!isCmsPluginInstalled) NavigationManager.NavigateTo("/admin/",true);

          //todo: implement CMS Interface here to load dynamic pages
      }
      catch (Exception ex ) when (ex is not NavigationException)
      {
          Console.WriteLine(ex);
      }
  }
  
  private async Task RunMigrations()
  {
      try
      {
          using var context = ContextFactory.CreateDbContext();
          var connection = context.Database.GetDbConnection();
          connection.ConnectionString = Configuration.GetConnectionString("DefaultConnection");;

          await context.Database.MigrateAsync();
      }
      catch (Exception e)
      {
          Console.WriteLine(e);
      }
  }

}